syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.auto.tune.client";
option java_outer_classname = "ReportServiceProto";
option objc_class_prefix = "RTG";

package com.alipay.autotune.client;

enum ReportType {
    REPORT_TYPE_OK = 0;
    REPORT_TYPE_EXEC_COMMAND = 1;
}

message ExecuteStep {
    string step_class = 1;
    string session_id = 2;
    map<string, string> args = 3;
}

message CommandResponse {
    bool success = 1;
    string message = 2;
    ReportType type = 3;
    string union_code = 5;
    repeated ExecuteStep execute_steps = 6;
}

message CommonResponse {
    bool success = 1;
    string message = 2;
}

message SystemMetricsGrpc {
    int32 system_cpu_count = 1;
    double system_cpu_load = 2;
    double process_cpu_load = 3;
    double wait_cpu_load = 4;
    double cpu_load = 5;
}

message JStateMetricsGrpc {
    double s0c = 1;
    double s1c = 2;
    double s0u = 3;
    double s1u = 4;
    double ec = 5;
    double eu = 6;
    double oc = 7;
    double ou = 8;
    double mc = 9;
    double mu = 10;
    double ccsc = 11;
    double ccsu = 12;
    int32  ygc = 13;
    double ygct = 14;
    int32  fgc = 15;
    double fgct = 16;
    double gct = 17;
    double ngcmn = 18;
    double ngcmx = 19;
    double ngc = 20;
    double ogcmn = 21;
    double ogcmx = 22;
    double ogc = 23;
    double mcmn = 24;
    double mcmx = 25;
    double ccsmn = 26;
    double ccsmx = 27;
    //safeponit
    int64 safepoint_count = 28;
    int64 safepoint_time = 29;
    //thread
    int64 thread_count = 30;
    int64 peak_thread_count = 31;
    int64 daemon_thread_count = 32;
    int64 dead_locked_count = 33;
    //classload
    int64 total_loaded_class_count = 34;
    int64 loaded_class_count = 35;
    int64 unloaded_class_count = 36;
}

message MemoryMetricsGrpc {
    int64 used = 1;
    int64 capacity = 2;
    int64 max = 3;
    double util = 4;
}

message GcMetricsGrpc {
    int64 gc_count = 1;
    int64 gc_time = 2;
}

message SystemCommonGrpc {
    string app_name = 1;
    string access_token = 2;
    string server_type = 3;
    string jvm_config = 4;
    int64 timestamp = 5;
    string hostname = 6;
    string namespace = 7;
    string pod_ip = 8;
    string java_version = 9;
    repeated string collectors = 10;
    string union_code = 11;
    int64 jvm_jit_time = 12;
    repeated ThreadPoolReq thread_pool_req = 13;
}

message CallBackRequest {
    string session_id = 1;
    map<string, string> tags = 2;
}

message ActionReportReq {
    string action_key = 1;
    string json_params = 2;
}

message MetricsGrpcRequest {
    SystemCommonGrpc system_common = 1;
    SystemMetricsGrpc system_metrics = 2;
    MemoryMetricsGrpc eden_memory_metric = 3;
    MemoryMetricsGrpc old_memory_metric = 4;
    MemoryMetricsGrpc meta_memory_metric = 5;
    MemoryMetricsGrpc code_cache_metric = 6;
    MemoryMetricsGrpc jvm_memory_metric = 7;
    MemoryMetricsGrpc system_memory_metric = 8;
    GcMetricsGrpc young_gc_metric = 9;
    GcMetricsGrpc full_gc_metric = 10;
    JStateMetricsGrpc jstate_metrics = 11;
}

message FileRequest {
    string name = 1;
    bytes data = 2;
    int64 offset = 3;
    string session_id = 4;
    SystemCommonGrpc system_common = 5;
}

message FileResponse {
    int32 status = 1;
    string message = 2;
}

message ThreadPoolReq {
    string thread_pool_name = 1;
    int32 active_count = 2;
    int32 pool_size = 3;
    int32 core_pool_size = 4;
    int64 keep_alive_time = 5;
    int64 completed_task_count = 6;
    int32 largest_pool_size = 7;
    int32 maximum_pool_size = 8;
    int64 task_count = 9;
    int64 block_queue = 10;
    int64 reject_count = 11;
    int32 idle_pool_size = 12;
}

message RequestMessage{
    string hostname = 1;
    string namespace = 2;
    string req_msg = 3;
    string session_id = 4;
}

message ResponseMessage{
    string session_id = 1;
    string rsp_msg = 2;
}

service ReportService {
    rpc Report (MetricsGrpcRequest) returns (CommonResponse) {}
    rpc Upload (stream FileRequest) returns (stream FileResponse) {}
    rpc HeartBeat (SystemCommonGrpc) returns (CommandResponse) {}
    rpc CallBack (CallBackRequest) returns (CommonResponse) {}
    rpc ActionReport (ActionReportReq) returns (CommonResponse) {}
    rpc ArthasStreamFunc(stream RequestMessage) returns (stream ResponseMessage){}
}