/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.UserInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserInfo extends TableImpl<UserInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.USER_INFO</code>
     */
    public static final UserInfo USER_INFO = new UserInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserInfoRecord> getRecordType() {
        return UserInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.ID</code>. 主键ID
     */
    public final TableField<UserInfoRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.ACCOUNT_ID</code>. 关联的AWS用户ID
     */
    public final TableField<UserInfoRecord, String> ACCOUNT_ID = createField(DSL.name("ACCOUNT_ID"), SQLDataType.VARCHAR(255).nullable(false), this, "关联的AWS用户ID");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.ACCESS_TOKEN</code>. 关联的token
     */
    public final TableField<UserInfoRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(255).nullable(false), this, "关联的token");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.USER_COMPANY</code>. 所属公司
     */
    public final TableField<UserInfoRecord, String> USER_COMPANY = createField(DSL.name("USER_COMPANY"), SQLDataType.VARCHAR(255), this, "所属公司");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.USER_NAME</code>. 名称
     */
    public final TableField<UserInfoRecord, String> USER_NAME = createField(DSL.name("USER_NAME"), SQLDataType.VARCHAR(255), this, "名称");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.CREATED_TIME</code>. 创建时间
     */
    public final TableField<UserInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.UPDATED_TIME</code>. 更新时间
     */
    public final TableField<UserInfoRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新时间");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.TENANT_CODE</code>. 租户

     */
    public final TableField<UserInfoRecord, String> TENANT_CODE = createField(DSL.name("TENANT_CODE"), SQLDataType.VARCHAR(128), this, "租户\r\n");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.PRODUCT_ACCOUNT_ID</code>. 产品账户
     */
    public final TableField<UserInfoRecord, String> PRODUCT_ACCOUNT_ID = createField(DSL.name("PRODUCT_ACCOUNT_ID"), SQLDataType.VARCHAR(128), this, "产品账户");

    /**
     * The column <code>TMAESTRO-LITE.USER_INFO.PLAN_CODE</code>.
     */
    public final TableField<UserInfoRecord, String> PLAN_CODE = createField(DSL.name("PLAN_CODE"), SQLDataType.VARCHAR(128), this, "");

    private UserInfo(Name alias, Table<UserInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserInfo(Name alias, Table<UserInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.USER_INFO</code> table reference
     */
    public UserInfo(String alias) {
        this(DSL.name(alias), USER_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.USER_INFO</code> table reference
     */
    public UserInfo(Name alias) {
        this(alias, USER_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.USER_INFO</code> table reference
     */
    public UserInfo() {
        this(DSL.name("USER_INFO"), null);
    }

    public <O extends Record> UserInfo(Table<O> child, ForeignKey<O, UserInfoRecord> key) {
        super(child, key, USER_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<UserInfoRecord, Integer> getIdentity() {
        return (Identity<UserInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_BC;
    }

    @Override
    public List<UniqueKey<UserInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserInfoRecord>>asList(Keys.CONSTRAINT_BC);
    }

    @Override
    public UserInfo as(String alias) {
        return new UserInfo(DSL.name(alias), this);
    }

    @Override
    public UserInfo as(Name alias) {
        return new UserInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(String name) {
        return new UserInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(Name name) {
        return new UserInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
