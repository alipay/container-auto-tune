/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Indexes;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.MeterMetricInfoRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeterMetricInfo extends TableImpl<MeterMetricInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.METER_METRIC_INFO</code>
     */
    public static final MeterMetricInfo METER_METRIC_INFO = new MeterMetricInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeterMetricInfoRecord> getRecordType() {
        return MeterMetricInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.METRIC_NAME</code>. pod name
     */
    public final TableField<MeterMetricInfoRecord, String> METRIC_NAME = createField(DSL.name("METRIC_NAME"), SQLDataType.VARCHAR(48).nullable(false), this, "pod name");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.APP_ID</code>. app id
     */
    public final TableField<MeterMetricInfoRecord, Long> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.BIGINT.nullable(false), this, "app id");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.APP_NAME</code>. app name
     */
    public final TableField<MeterMetricInfoRecord, String> APP_NAME = createField(DSL.name("APP_NAME"), SQLDataType.VARCHAR(48).nullable(false), this, "app name");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.GMT_CREATED</code>. 创建时间
     */
    public final TableField<MeterMetricInfoRecord, Long> GMT_CREATED = createField(DSL.name("GMT_CREATED"), SQLDataType.BIGINT.nullable(false), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.DATA</code>. data
     */
    public final TableField<MeterMetricInfoRecord, String> DATA = createField(DSL.name("DATA"), SQLDataType.VARCHAR(256).nullable(false), this, "data");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.DT</code>. 天分区
     */
    public final TableField<MeterMetricInfoRecord, Long> DT = createField(DSL.name("DT"), SQLDataType.BIGINT.nullable(false), this, "天分区");

    /**
     * The column <code>TMAESTRO-LITE.METER_METRIC_INFO.METRIC_VENDOR</code>. jvm state
     */
    public final TableField<MeterMetricInfoRecord, String> METRIC_VENDOR = createField(DSL.name("METRIC_VENDOR"), SQLDataType.VARCHAR(48).nullable(false), this, "jvm state");

    private MeterMetricInfo(Name alias, Table<MeterMetricInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeterMetricInfo(Name alias, Table<MeterMetricInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.METER_METRIC_INFO</code> table reference
     */
    public MeterMetricInfo(String alias) {
        this(DSL.name(alias), METER_METRIC_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.METER_METRIC_INFO</code> table reference
     */
    public MeterMetricInfo(Name alias) {
        this(alias, METER_METRIC_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.METER_METRIC_INFO</code> table reference
     */
    public MeterMetricInfo() {
        this(DSL.name("METER_METRIC_INFO"), null);
    }

    public <O extends Record> MeterMetricInfo(Table<O> child, ForeignKey<O, MeterMetricInfoRecord> key) {
        super(child, key, METER_METRIC_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METER_METRIC_INFO_APPID_METRICNAME_DT_INDEX);
    }

    @Override
    public MeterMetricInfo as(String alias) {
        return new MeterMetricInfo(DSL.name(alias), this);
    }

    @Override
    public MeterMetricInfo as(Name alias) {
        return new MeterMetricInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeterMetricInfo rename(String name) {
        return new MeterMetricInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeterMetricInfo rename(Name name) {
        return new MeterMetricInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Long, String, Long, String, Long, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
