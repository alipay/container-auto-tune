/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.HealthCheckResultRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HealthCheckResult extends TableImpl<HealthCheckResultRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT</code>
     */
    public static final HealthCheckResult HEALTH_CHECK_RESULT = new HealthCheckResult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HealthCheckResultRecord> getRecordType() {
        return HealthCheckResultRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.ID</code>. 主键ID
     */
    public final TableField<HealthCheckResultRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.APP_ID</code>. 关联的集群id
     */
    public final TableField<HealthCheckResultRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER.nullable(false), this, "关联的集群id");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.ACCESS_TOKEN</code>. 关联的token
     */
    public final TableField<HealthCheckResultRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(255), this, "关联的token");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.CREATED_BY</code>. 创建人
     */
    public final TableField<HealthCheckResultRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(255), this, "创建人");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.CREATED_TIME</code>. 创建时间
     */
    public final TableField<HealthCheckResultRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.UPDATE_TIME</code>. 检查完成后更新时间
     */
    public final TableField<HealthCheckResultRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("UPDATE_TIME"), SQLDataType.LOCALDATETIME(6), this, "检查完成后更新时间");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.CREATE_MODE</code>. online 在线 offline 离线任务
     */
    public final TableField<HealthCheckResultRecord, String> CREATE_MODE = createField(DSL.name("CREATE_MODE"), SQLDataType.VARCHAR(30), this, "online 在线 offline 离线任务");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.STATUS</code>. 检测状态
     */
    public final TableField<HealthCheckResultRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(30), this, "检测状态");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.PROBLEAM</code>. 检查简要结果
     */
    public final TableField<HealthCheckResultRecord, String> PROBLEAM = createField(DSL.name("PROBLEAM"), SQLDataType.CLOB, this, "检查简要结果");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.REPORT</code>. 结果报告
     */
    public final TableField<HealthCheckResultRecord, String> REPORT = createField(DSL.name("REPORT"), SQLDataType.CLOB, this, "结果报告");

    /**
     * The column <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT.REPORT_DETAIL</code>. 结果报告详情
     */
    public final TableField<HealthCheckResultRecord, String> REPORT_DETAIL = createField(DSL.name("REPORT_DETAIL"), SQLDataType.CLOB, this, "结果报告详情");

    private HealthCheckResult(Name alias, Table<HealthCheckResultRecord> aliased) {
        this(alias, aliased, null);
    }

    private HealthCheckResult(Name alias, Table<HealthCheckResultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT</code> table reference
     */
    public HealthCheckResult(String alias) {
        this(DSL.name(alias), HEALTH_CHECK_RESULT);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT</code> table reference
     */
    public HealthCheckResult(Name alias) {
        this(alias, HEALTH_CHECK_RESULT);
    }

    /**
     * Create a <code>TMAESTRO-LITE.HEALTH_CHECK_RESULT</code> table reference
     */
    public HealthCheckResult() {
        this(DSL.name("HEALTH_CHECK_RESULT"), null);
    }

    public <O extends Record> HealthCheckResult(Table<O> child, ForeignKey<O, HealthCheckResultRecord> key) {
        super(child, key, HEALTH_CHECK_RESULT);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<HealthCheckResultRecord, Integer> getIdentity() {
        return (Identity<HealthCheckResultRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<HealthCheckResultRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F4;
    }

    @Override
    public List<UniqueKey<HealthCheckResultRecord>> getKeys() {
        return Arrays.<UniqueKey<HealthCheckResultRecord>>asList(Keys.CONSTRAINT_F4);
    }

    @Override
    public HealthCheckResult as(String alias) {
        return new HealthCheckResult(DSL.name(alias), this);
    }

    @Override
    public HealthCheckResult as(Name alias) {
        return new HealthCheckResult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HealthCheckResult rename(String name) {
        return new HealthCheckResult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HealthCheckResult rename(Name name) {
        return new HealthCheckResult(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, String, String, LocalDateTime, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
