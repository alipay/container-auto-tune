/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Indexes;
import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.AppInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppInfo extends TableImpl<AppInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.APP_INFO</code>
     */
    public static final AppInfo APP_INFO = new AppInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppInfoRecord> getRecordType() {
        return AppInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.ID</code>. 唯一ID;唯一ID
     */
    public final TableField<AppInfoRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "唯一ID;唯一ID");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.USER_ID</code>. 关联的用户id
     */
    public final TableField<AppInfoRecord, Integer> USER_ID = createField(DSL.name("USER_ID"), SQLDataType.INTEGER, this, "关联的用户id");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.ACCESS_TOKEN</code>. 关联的token
     */
    public final TableField<AppInfoRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(255).nullable(false), this, "关联的token");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.NODE_IDS</code>. 关联的集群组
     */
    public final TableField<AppInfoRecord, String> NODE_IDS = createField(DSL.name("NODE_IDS"), SQLDataType.VARCHAR(255), this, "关联的集群组");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_NAME</code>. 集群真实名称;集群真实名称
     */
    public final TableField<AppInfoRecord, String> APP_NAME = createField(DSL.name("APP_NAME"), SQLDataType.VARCHAR(255), this, "集群真实名称;集群真实名称");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_AS_NAME</code>. 应用别名
     */
    public final TableField<AppInfoRecord, String> APP_AS_NAME = createField(DSL.name("APP_AS_NAME"), SQLDataType.VARCHAR(255), this, "应用别名");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_DESC</code>. 集群说明;集群说明
     */
    public final TableField<AppInfoRecord, String> APP_DESC = createField(DSL.name("APP_DESC"), SQLDataType.VARCHAR(255), this, "集群说明;集群说明");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.CREATED_TIME</code>. 创建时间;创建时间
     */
    public final TableField<AppInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间;创建时间");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.UPDATED_TIME</code>. 更新时间;更新时间
     */
    public final TableField<AppInfoRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "更新时间;更新时间");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.STATUS</code>. 状态;状态
     */
    public final TableField<AppInfoRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255).nullable(false), this, "状态;状态");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_DEFAULT_JVM</code>. 集群jvm生效配置;集群jvm生效配置
     */
    public final TableField<AppInfoRecord, String> APP_DEFAULT_JVM = createField(DSL.name("APP_DEFAULT_JVM"), SQLDataType.VARCHAR(1024), this, "集群jvm生效配置;集群jvm生效配置");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.CLUSTER_NAME</code>. k8s集群名
     */
    public final TableField<AppInfoRecord, String> CLUSTER_NAME = createField(DSL.name("CLUSTER_NAME"), SQLDataType.VARCHAR(255), this, "k8s集群名");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_TAG</code>. 标注应用类型
     */
    public final TableField<AppInfoRecord, String> APP_TAG = createField(DSL.name("APP_TAG"), SQLDataType.VARCHAR(255), this, "标注应用类型");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.NAMESPACE</code>.
     */
    public final TableField<AppInfoRecord, String> NAMESPACE = createField(DSL.name("NAMESPACE"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.CLUSTER_ID</code>. 集群ID
     */
    public final TableField<AppInfoRecord, String> CLUSTER_ID = createField(DSL.name("CLUSTER_ID"), SQLDataType.VARCHAR(255), this, "集群ID");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.SERVER_TYPE</code>. 资源类型
     */
    public final TableField<AppInfoRecord, String> SERVER_TYPE = createField(DSL.name("SERVER_TYPE"), SQLDataType.VARCHAR(255), this, "资源类型");

    /**
     * The column <code>TMAESTRO-LITE.APP_INFO.APP_JVM_TEMPLATE</code>. 该应用对应的APP模版
     */
    public final TableField<AppInfoRecord, String> APP_JVM_TEMPLATE = createField(DSL.name("APP_JVM_TEMPLATE"), SQLDataType.VARCHAR(2048), this, "该应用对应的APP模版");

    private AppInfo(Name alias, Table<AppInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppInfo(Name alias, Table<AppInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.APP_INFO</code> table reference
     */
    public AppInfo(String alias) {
        this(DSL.name(alias), APP_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.APP_INFO</code> table reference
     */
    public AppInfo(Name alias) {
        this(alias, APP_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.APP_INFO</code> table reference
     */
    public AppInfo() {
        this(DSL.name("APP_INFO"), null);
    }

    public <O extends Record> AppInfo(Table<O> child, ForeignKey<O, AppInfoRecord> key) {
        super(child, key, APP_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APP_INFO_ACCESS_TOKEN_CLUSTER_NAME_STATUS_INDEX, Indexes.APP_INFO_APP_NAME_ACCESS_TOKEN_STATUS_INDEX, Indexes.APP_INFO_ID_STATUS_INDEX);
    }

    @Override
    public Identity<AppInfoRecord, Integer> getIdentity() {
        return (Identity<AppInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    @Override
    public List<UniqueKey<AppInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<AppInfoRecord>>asList(Keys.CONSTRAINT_7, Keys.APP_INFO_APP_NAME_ACCESS_TOKEN_NAMESPACE_UINDEX);
    }

    @Override
    public AppInfo as(String alias) {
        return new AppInfo(DSL.name(alias), this);
    }

    @Override
    public AppInfo as(Name alias) {
        return new AppInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppInfo rename(String name) {
        return new AppInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppInfo rename(Name name) {
        return new AppInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
