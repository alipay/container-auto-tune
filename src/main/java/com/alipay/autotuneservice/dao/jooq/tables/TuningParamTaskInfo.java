/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTaskInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TuningParamTaskInfo extends TableImpl<TuningParamTaskInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO</code>
     */
    public static final TuningParamTaskInfo TUNING_PARAM_TASK_INFO = new TuningParamTaskInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TuningParamTaskInfoRecord> getRecordType() {
        return TuningParamTaskInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.INFO_ID</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, Long> INFO_ID = createField(DSL.name("INFO_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.APP_ID</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.APP</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> APP = createField(DSL.name("APP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.OPTIMIZATION_TYPE</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> OPTIMIZATION_TYPE = createField(DSL.name("OPTIMIZATION_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.PROBLEM_TYPE</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> PROBLEM_TYPE = createField(DSL.name("PROBLEM_TYPE"), SQLDataType.VARCHAR(510), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.PARAM_DISTRIBUTION</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> PARAM_DISTRIBUTION = createField(DSL.name("PARAM_DISTRIBUTION"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.PROBLEM_ID</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> PROBLEM_ID = createField(DSL.name("PROBLEM_ID"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.DT</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, String> DT = createField(DSL.name("DT"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO.WRITE_TIME</code>.
     */
    public final TableField<TuningParamTaskInfoRecord, LocalDateTime> WRITE_TIME = createField(DSL.name("WRITE_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private TuningParamTaskInfo(Name alias, Table<TuningParamTaskInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private TuningParamTaskInfo(Name alias, Table<TuningParamTaskInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO</code> table reference
     */
    public TuningParamTaskInfo(String alias) {
        this(DSL.name(alias), TUNING_PARAM_TASK_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO</code> table reference
     */
    public TuningParamTaskInfo(Name alias) {
        this(alias, TUNING_PARAM_TASK_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.TUNING_PARAM_TASK_INFO</code> table reference
     */
    public TuningParamTaskInfo() {
        this(DSL.name("TUNING_PARAM_TASK_INFO"), null);
    }

    public <O extends Record> TuningParamTaskInfo(Table<O> child, ForeignKey<O, TuningParamTaskInfoRecord> key) {
        super(child, key, TUNING_PARAM_TASK_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<TuningParamTaskInfoRecord, Long> getIdentity() {
        return (Identity<TuningParamTaskInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TuningParamTaskInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6ED;
    }

    @Override
    public List<UniqueKey<TuningParamTaskInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<TuningParamTaskInfoRecord>>asList(Keys.CONSTRAINT_6ED);
    }

    @Override
    public TuningParamTaskInfo as(String alias) {
        return new TuningParamTaskInfo(DSL.name(alias), this);
    }

    @Override
    public TuningParamTaskInfo as(Name alias) {
        return new TuningParamTaskInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTaskInfo rename(String name) {
        return new TuningParamTaskInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTaskInfo rename(Name name) {
        return new TuningParamTaskInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, String, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
