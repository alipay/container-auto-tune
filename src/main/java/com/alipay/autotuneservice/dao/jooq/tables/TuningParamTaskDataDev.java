/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTaskDataDevRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row21;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TuningParamTaskDataDev extends TableImpl<TuningParamTaskDataDevRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV</code>
     */
    public static final TuningParamTaskDataDev TUNING_PARAM_TASK_DATA_DEV = new TuningParamTaskDataDev();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TuningParamTaskDataDevRecord> getRecordType() {
        return TuningParamTaskDataDevRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.PIPELINE_ID</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> PIPELINE_ID = createField(DSL.name("PIPELINE_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.APP_ID</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.APP_NAME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> APP_NAME = createField(DSL.name("APP_NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.PODS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> PODS = createField(DSL.name("PODS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.OPTIMIZATION_TYPE</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> OPTIMIZATION_TYPE = createField(DSL.name("OPTIMIZATION_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.PROBLEM_DESCRIBE</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> PROBLEM_DESCRIBE = createField(DSL.name("PROBLEM_DESCRIBE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.PROBLEM_TYPE</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> PROBLEM_TYPE = createField(DSL.name("PROBLEM_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.DIRECTION</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> DIRECTION = createField(DSL.name("DIRECTION"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_NUMS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> TRIAL_NUMS = createField(DSL.name("TRIAL_NUMS"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_PARAMS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> TRIAL_PARAMS = createField(DSL.name("TRIAL_PARAMS"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.MAX_ITER</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> MAX_ITER = createField(DSL.name("MAX_ITER"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_TIME_MIN</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> TRIAL_TIME_MIN = createField(DSL.name("TRIAL_TIME_MIN"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_TIME_MAX</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, Integer> TRIAL_TIME_MAX = createField(DSL.name("TRIAL_TIME_MAX"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_START_TIME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, LocalDateTime> TRIAL_START_TIME = createField(DSL.name("TRIAL_START_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TRIAL_STOP_TIME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, LocalDateTime> TRIAL_STOP_TIME = createField(DSL.name("TRIAL_STOP_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.START_TIME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, LocalDateTime> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.END_TIME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, LocalDateTime> END_TIME = createField(DSL.name("END_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.TASK_STATUS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> TASK_STATUS = createField(DSL.name("TASK_STATUS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.BEFORE_PARAMS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> BEFORE_PARAMS = createField(DSL.name("BEFORE_PARAMS"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.MODIFY_TIME</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, LocalDateTime> MODIFY_TIME = createField(DSL.name("MODIFY_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV.COMPARE_PODS</code>.
     */
    public final TableField<TuningParamTaskDataDevRecord, String> COMPARE_PODS = createField(DSL.name("COMPARE_PODS"), SQLDataType.VARCHAR(1000), this, "");

    private TuningParamTaskDataDev(Name alias, Table<TuningParamTaskDataDevRecord> aliased) {
        this(alias, aliased, null);
    }

    private TuningParamTaskDataDev(Name alias, Table<TuningParamTaskDataDevRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV</code> table reference
     */
    public TuningParamTaskDataDev(String alias) {
        this(DSL.name(alias), TUNING_PARAM_TASK_DATA_DEV);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV</code> table reference
     */
    public TuningParamTaskDataDev(Name alias) {
        this(alias, TUNING_PARAM_TASK_DATA_DEV);
    }

    /**
     * Create a <code>TMAESTRO-LITE.TUNING_PARAM_TASK_DATA_DEV</code> table reference
     */
    public TuningParamTaskDataDev() {
        this(DSL.name("TUNING_PARAM_TASK_DATA_DEV"), null);
    }

    public <O extends Record> TuningParamTaskDataDev(Table<O> child, ForeignKey<O, TuningParamTaskDataDevRecord> key) {
        super(child, key, TUNING_PARAM_TASK_DATA_DEV);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public UniqueKey<TuningParamTaskDataDevRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B0;
    }

    @Override
    public List<UniqueKey<TuningParamTaskDataDevRecord>> getKeys() {
        return Arrays.<UniqueKey<TuningParamTaskDataDevRecord>>asList(Keys.CONSTRAINT_B0);
    }

    @Override
    public TuningParamTaskDataDev as(String alias) {
        return new TuningParamTaskDataDev(DSL.name(alias), this);
    }

    @Override
    public TuningParamTaskDataDev as(Name alias) {
        return new TuningParamTaskDataDev(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTaskDataDev rename(String name) {
        return new TuningParamTaskDataDev(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTaskDataDev rename(Name name) {
        return new TuningParamTaskDataDev(name, null);
    }

    // -------------------------------------------------------------------------
    // Row21 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row21<Integer, Integer, String, String, String, String, String, String, Integer, String, Integer, Integer, Integer, LocalDateTime, LocalDateTime, LocalDateTime, LocalDateTime, String, String, LocalDateTime, String> fieldsRow() {
        return (Row21) super.fieldsRow();
    }
}
