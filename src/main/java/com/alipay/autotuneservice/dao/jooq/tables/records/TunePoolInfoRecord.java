/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables.records;


import com.alipay.autotuneservice.dao.jooq.tables.TunePoolInfo;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TunePoolInfoRecord extends UpdatableRecordImpl<TunePoolInfoRecord> implements Record12<Integer, String, Integer, Integer, String, LocalDateTime, LocalDateTime, String, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.ID</code>. 主键ID
     */
    public TunePoolInfoRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.ID</code>. 主键ID
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.ACCESS_TOKEN</code>. 关联的token
     */
    public TunePoolInfoRecord setAccessToken(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.ACCESS_TOKEN</code>. 关联的token
     */
    public String getAccessToken() {
        return (String) get(1);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.APP_ID</code>. 应用ID
     */
    public TunePoolInfoRecord setAppId(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.APP_ID</code>. 应用ID
     */
    public Integer getAppId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.PIPELINE_ID</code>. 关联的流程ID
     */
    public TunePoolInfoRecord setPipelineId(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.PIPELINE_ID</code>. 关联的流程ID
     */
    public Integer getPipelineId() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.APP_NAME</code>. 应用名
     */
    public TunePoolInfoRecord setAppName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.APP_NAME</code>. 应用名
     */
    public String getAppName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.CREATED_TIME</code>. 创建时间
     */
    public TunePoolInfoRecord setCreatedTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.CREATED_TIME</code>. 创建时间
     */
    public LocalDateTime getCreatedTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.UPDATED_TIME</code>. 更新时间
     */
    public TunePoolInfoRecord setUpdatedTime(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.UPDATED_TIME</code>. 更新时间
     */
    public LocalDateTime getUpdatedTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.UPDATED_BY</code>. 更新人
     */
    public TunePoolInfoRecord setUpdatedBy(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.UPDATED_BY</code>. 更新人
     */
    public String getUpdatedBy() {
        return (String) get(7);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.EXPERIMENT_POOL_STATUS</code>. 实验池状态
     */
    public TunePoolInfoRecord setExperimentPoolStatus(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.EXPERIMENT_POOL_STATUS</code>. 实验池状态
     */
    public String getExperimentPoolStatus() {
        return (String) get(8);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.BATCH_POOL_STATUS</code>. 调参池状态
     */
    public TunePoolInfoRecord setBatchPoolStatus(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.BATCH_POOL_STATUS</code>. 调参池状态
     */
    public String getBatchPoolStatus() {
        return (String) get(9);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.EXPERIMENT_POOL_CONFIG</code>. 实验池配置
     */
    public TunePoolInfoRecord setExperimentPoolConfig(String value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.EXPERIMENT_POOL_CONFIG</code>. 实验池配置
     */
    public String getExperimentPoolConfig() {
        return (String) get(10);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.BATCH_POOL_CONFIG</code>. 调参池配置
     */
    public TunePoolInfoRecord setBatchPoolConfig(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.TUNE_POOL_INFO.BATCH_POOL_CONFIG</code>. 调参池配置
     */
    public String getBatchPoolConfig() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, String, Integer, Integer, String, LocalDateTime, LocalDateTime, String, String, String, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, String, Integer, Integer, String, LocalDateTime, LocalDateTime, String, String, String, String, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TunePoolInfo.TUNE_POOL_INFO.ID;
    }

    @Override
    public Field<String> field2() {
        return TunePoolInfo.TUNE_POOL_INFO.ACCESS_TOKEN;
    }

    @Override
    public Field<Integer> field3() {
        return TunePoolInfo.TUNE_POOL_INFO.APP_ID;
    }

    @Override
    public Field<Integer> field4() {
        return TunePoolInfo.TUNE_POOL_INFO.PIPELINE_ID;
    }

    @Override
    public Field<String> field5() {
        return TunePoolInfo.TUNE_POOL_INFO.APP_NAME;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return TunePoolInfo.TUNE_POOL_INFO.CREATED_TIME;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return TunePoolInfo.TUNE_POOL_INFO.UPDATED_TIME;
    }

    @Override
    public Field<String> field8() {
        return TunePoolInfo.TUNE_POOL_INFO.UPDATED_BY;
    }

    @Override
    public Field<String> field9() {
        return TunePoolInfo.TUNE_POOL_INFO.EXPERIMENT_POOL_STATUS;
    }

    @Override
    public Field<String> field10() {
        return TunePoolInfo.TUNE_POOL_INFO.BATCH_POOL_STATUS;
    }

    @Override
    public Field<String> field11() {
        return TunePoolInfo.TUNE_POOL_INFO.EXPERIMENT_POOL_CONFIG;
    }

    @Override
    public Field<String> field12() {
        return TunePoolInfo.TUNE_POOL_INFO.BATCH_POOL_CONFIG;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getAccessToken();
    }

    @Override
    public Integer component3() {
        return getAppId();
    }

    @Override
    public Integer component4() {
        return getPipelineId();
    }

    @Override
    public String component5() {
        return getAppName();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedTime();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdatedTime();
    }

    @Override
    public String component8() {
        return getUpdatedBy();
    }

    @Override
    public String component9() {
        return getExperimentPoolStatus();
    }

    @Override
    public String component10() {
        return getBatchPoolStatus();
    }

    @Override
    public String component11() {
        return getExperimentPoolConfig();
    }

    @Override
    public String component12() {
        return getBatchPoolConfig();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getAccessToken();
    }

    @Override
    public Integer value3() {
        return getAppId();
    }

    @Override
    public Integer value4() {
        return getPipelineId();
    }

    @Override
    public String value5() {
        return getAppName();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedTime();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdatedTime();
    }

    @Override
    public String value8() {
        return getUpdatedBy();
    }

    @Override
    public String value9() {
        return getExperimentPoolStatus();
    }

    @Override
    public String value10() {
        return getBatchPoolStatus();
    }

    @Override
    public String value11() {
        return getExperimentPoolConfig();
    }

    @Override
    public String value12() {
        return getBatchPoolConfig();
    }

    @Override
    public TunePoolInfoRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value2(String value) {
        setAccessToken(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value3(Integer value) {
        setAppId(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value4(Integer value) {
        setPipelineId(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value5(String value) {
        setAppName(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value6(LocalDateTime value) {
        setCreatedTime(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value7(LocalDateTime value) {
        setUpdatedTime(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value8(String value) {
        setUpdatedBy(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value9(String value) {
        setExperimentPoolStatus(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value10(String value) {
        setBatchPoolStatus(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value11(String value) {
        setExperimentPoolConfig(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord value12(String value) {
        setBatchPoolConfig(value);
        return this;
    }

    @Override
    public TunePoolInfoRecord values(Integer value1, String value2, Integer value3, Integer value4, String value5, LocalDateTime value6, LocalDateTime value7, String value8, String value9, String value10, String value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TunePoolInfoRecord
     */
    public TunePoolInfoRecord() {
        super(TunePoolInfo.TUNE_POOL_INFO);
    }

    /**
     * Create a detached, initialised TunePoolInfoRecord
     */
    public TunePoolInfoRecord(Integer id, String accessToken, Integer appId, Integer pipelineId, String appName, LocalDateTime createdTime, LocalDateTime updatedTime, String updatedBy, String experimentPoolStatus, String batchPoolStatus, String experimentPoolConfig, String batchPoolConfig) {
        super(TunePoolInfo.TUNE_POOL_INFO);

        setId(id);
        setAccessToken(accessToken);
        setAppId(appId);
        setPipelineId(pipelineId);
        setAppName(appName);
        setCreatedTime(createdTime);
        setUpdatedTime(updatedTime);
        setUpdatedBy(updatedBy);
        setExperimentPoolStatus(experimentPoolStatus);
        setBatchPoolStatus(batchPoolStatus);
        setExperimentPoolConfig(experimentPoolConfig);
        setBatchPoolConfig(batchPoolConfig);
    }
}
