/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.ExpertKnowledgeRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpertKnowledge extends TableImpl<ExpertKnowledgeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE</code>
     */
    public static final ExpertKnowledge EXPERT_KNOWLEDGE = new ExpertKnowledge();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExpertKnowledgeRecord> getRecordType() {
        return ExpertKnowledgeRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.ID</code>.
     */
    public final TableField<ExpertKnowledgeRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.GARBAGE_COLLECTOR</code>. 垃圾回收器种类
     */
    public final TableField<ExpertKnowledgeRecord, String> GARBAGE_COLLECTOR = createField(DSL.name("GARBAGE_COLLECTOR"), SQLDataType.VARCHAR(128), this, "垃圾回收器种类");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.JDK_VERSION</code>. jdk版本
     */
    public final TableField<ExpertKnowledgeRecord, String> JDK_VERSION = createField(DSL.name("JDK_VERSION"), SQLDataType.VARCHAR(128), this, "jdk版本");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.DESC</code>. 问题描述
     */
    public final TableField<ExpertKnowledgeRecord, String> DESC = createField(DSL.name("DESC"), SQLDataType.VARCHAR(2048), this, "问题描述");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.PROBLEM_TYPE_SET</code>. 问题类型集合
     */
    public final TableField<ExpertKnowledgeRecord, String> PROBLEM_TYPE_SET = createField(DSL.name("PROBLEM_TYPE_SET"), SQLDataType.VARCHAR(512), this, "问题类型集合");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.EXPERT_JVM_PLANS</code>. 调整方案
     */
    public final TableField<ExpertKnowledgeRecord, String> EXPERT_JVM_PLANS = createField(DSL.name("EXPERT_JVM_PLANS"), SQLDataType.VARCHAR(2048), this, "调整方案");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.CREATED_TIME</code>. 创建时间
     */
    public final TableField<ExpertKnowledgeRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.CREATED_BY</code>. 创建人
     */
    public final TableField<ExpertKnowledgeRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(128), this, "创建人");

    /**
     * The column <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE.UPDATED_TIME</code>. 更新时间
     */
    public final TableField<ExpertKnowledgeRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "更新时间");

    private ExpertKnowledge(Name alias, Table<ExpertKnowledgeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExpertKnowledge(Name alias, Table<ExpertKnowledgeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE</code> table reference
     */
    public ExpertKnowledge(String alias) {
        this(DSL.name(alias), EXPERT_KNOWLEDGE);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE</code> table reference
     */
    public ExpertKnowledge(Name alias) {
        this(alias, EXPERT_KNOWLEDGE);
    }

    /**
     * Create a <code>TMAESTRO-LITE.EXPERT_KNOWLEDGE</code> table reference
     */
    public ExpertKnowledge() {
        this(DSL.name("EXPERT_KNOWLEDGE"), null);
    }

    public <O extends Record> ExpertKnowledge(Table<O> child, ForeignKey<O, ExpertKnowledgeRecord> key) {
        super(child, key, EXPERT_KNOWLEDGE);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<ExpertKnowledgeRecord, Integer> getIdentity() {
        return (Identity<ExpertKnowledgeRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExpertKnowledgeRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_8A;
    }

    @Override
    public List<UniqueKey<ExpertKnowledgeRecord>> getKeys() {
        return Arrays.<UniqueKey<ExpertKnowledgeRecord>>asList(Keys.CONSTRAINT_8A);
    }

    @Override
    public ExpertKnowledge as(String alias) {
        return new ExpertKnowledge(DSL.name(alias), this);
    }

    @Override
    public ExpertKnowledge as(Name alias) {
        return new ExpertKnowledge(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpertKnowledge rename(String name) {
        return new ExpertKnowledge(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExpertKnowledge rename(Name name) {
        return new ExpertKnowledge(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
