/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.JvmMonitorMetricRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JvmMonitorMetric extends TableImpl<JvmMonitorMetricRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.JVM_MONITOR_METRIC</code>
     */
    public static final JvmMonitorMetric JVM_MONITOR_METRIC = new JvmMonitorMetric();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JvmMonitorMetricRecord> getRecordType() {
        return JvmMonitorMetricRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.ID</code>. 唯一ID;唯一ID
     */
    public final TableField<JvmMonitorMetricRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "唯一ID;唯一ID");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CPUCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> CPUCOUNT = createField(DSL.name("CPUCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SYSTEMCPULOAD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> SYSTEMCPULOAD = createField(DSL.name("SYSTEMCPULOAD"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.PROCESSCPULOAD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> PROCESSCPULOAD = createField(DSL.name("PROCESSCPULOAD"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.WAITCPULOAD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> WAITCPULOAD = createField(DSL.name("WAITCPULOAD"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CPULOAD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CPULOAD = createField(DSL.name("CPULOAD"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CLUSTER</code>.
     */
    public final TableField<JvmMonitorMetricRecord, String> CLUSTER = createField(DSL.name("CLUSTER"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.PERIOD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> PERIOD = createField(DSL.name("PERIOD"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.POD</code>.
     */
    public final TableField<JvmMonitorMetricRecord, String> POD = createField(DSL.name("POD"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.DT</code>. 分区
     */
    public final TableField<JvmMonitorMetricRecord, Long> DT = createField(DSL.name("DT"), SQLDataType.BIGINT, this, "分区");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.APPID</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Integer> APPID = createField(DSL.name("APPID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.APP</code>.
     */
    public final TableField<JvmMonitorMetricRecord, String> APP = createField(DSL.name("APP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EDEN_USED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EDEN_USED = createField(DSL.name("EDEN_USED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EDEN_MAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EDEN_MAX = createField(DSL.name("EDEN_MAX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EDEN_CAPACITY</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EDEN_CAPACITY = createField(DSL.name("EDEN_CAPACITY"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EDEN_UTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EDEN_UTIL = createField(DSL.name("EDEN_UTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OLD_USED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OLD_USED = createField(DSL.name("OLD_USED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OLD_MAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OLD_MAX = createField(DSL.name("OLD_MAX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OLD_CAPACITY</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OLD_CAPACITY = createField(DSL.name("OLD_CAPACITY"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OLD_UTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OLD_UTIL = createField(DSL.name("OLD_UTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.META_UTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> META_UTIL = createField(DSL.name("META_UTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.META_USED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> META_USED = createField(DSL.name("META_USED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.META_MAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> META_MAX = createField(DSL.name("META_MAX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.META_CAPACITY</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> META_CAPACITY = createField(DSL.name("META_CAPACITY"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.JVM_MEM_UTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> JVM_MEM_UTIL = createField(DSL.name("JVM_MEM_UTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.JVM_MEM_USED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> JVM_MEM_USED = createField(DSL.name("JVM_MEM_USED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.JVM_MEM_MAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> JVM_MEM_MAX = createField(DSL.name("JVM_MEM_MAX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.JVM_MEM_CAPACITY</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> JVM_MEM_CAPACITY = createField(DSL.name("JVM_MEM_CAPACITY"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SYSTEM_MEM_UTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> SYSTEM_MEM_UTIL = createField(DSL.name("SYSTEM_MEM_UTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SYSTEM_MEM_USED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> SYSTEM_MEM_USED = createField(DSL.name("SYSTEM_MEM_USED"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SYSTEM_MEM_MAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> SYSTEM_MEM_MAX = createField(DSL.name("SYSTEM_MEM_MAX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SYSTEM_MEM_CAPACITY</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> SYSTEM_MEM_CAPACITY = createField(DSL.name("SYSTEM_MEM_CAPACITY"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.YGC_COUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> YGC_COUNT = createField(DSL.name("YGC_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.YGC_TIME</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> YGC_TIME = createField(DSL.name("YGC_TIME"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.FGC_COUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> FGC_COUNT = createField(DSL.name("FGC_COUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.FGC_TIME</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> FGC_TIME = createField(DSL.name("FGC_TIME"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.S0C</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> S0C = createField(DSL.name("S0C"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.S1C</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> S1C = createField(DSL.name("S1C"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.S0U</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> S0U = createField(DSL.name("S0U"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.S1U</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> S1U = createField(DSL.name("S1U"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EC = createField(DSL.name("EC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.EU</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> EU = createField(DSL.name("EU"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OC = createField(DSL.name("OC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OU</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OU = createField(DSL.name("OU"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.MC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> MC = createField(DSL.name("MC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.MU</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> MU = createField(DSL.name("MU"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CCSC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CCSC = createField(DSL.name("CCSC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CCSU</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CCSU = createField(DSL.name("CCSU"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.YGC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Integer> YGC = createField(DSL.name("YGC"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.YGCT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> YGCT = createField(DSL.name("YGCT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.FGC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Integer> FGC = createField(DSL.name("FGC"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.FGCT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> FGCT = createField(DSL.name("FGCT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.GCT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> GCT = createField(DSL.name("GCT"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.NGCMN</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> NGCMN = createField(DSL.name("NGCMN"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.NGCMX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> NGCMX = createField(DSL.name("NGCMX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.NGC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> NGC = createField(DSL.name("NGC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OGCMN</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OGCMN = createField(DSL.name("OGCMN"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OGCMX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OGCMX = createField(DSL.name("OGCMX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.OGC</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> OGC = createField(DSL.name("OGC"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.MCMN</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> MCMN = createField(DSL.name("MCMN"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.MCMX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> MCMX = createField(DSL.name("MCMX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CCSMN</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CCSMN = createField(DSL.name("CCSMN"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CCSMX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CCSMX = createField(DSL.name("CCSMX"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CODECACHEUSED</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> CODECACHEUSED = createField(DSL.name("CODECACHEUSED"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CODECACHEMAX</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> CODECACHEMAX = createField(DSL.name("CODECACHEMAX"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.CODECACHEUTIL</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Double> CODECACHEUTIL = createField(DSL.name("CODECACHEUTIL"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SAFEPOINTCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> SAFEPOINTCOUNT = createField(DSL.name("SAFEPOINTCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.SAFEPOINTTIME</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> SAFEPOINTTIME = createField(DSL.name("SAFEPOINTTIME"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.THREADCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> THREADCOUNT = createField(DSL.name("THREADCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.PEAKTHREADCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> PEAKTHREADCOUNT = createField(DSL.name("PEAKTHREADCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.DAEMONTHREADCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> DAEMONTHREADCOUNT = createField(DSL.name("DAEMONTHREADCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.DEADLOCKEDCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> DEADLOCKEDCOUNT = createField(DSL.name("DEADLOCKEDCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.TOTALLOADEDCLASSCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> TOTALLOADEDCLASSCOUNT = createField(DSL.name("TOTALLOADEDCLASSCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.LOADEDCLASSCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> LOADEDCLASSCOUNT = createField(DSL.name("LOADEDCLASSCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.UNLOADEDCLASSCOUNT</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> UNLOADEDCLASSCOUNT = createField(DSL.name("UNLOADEDCLASSCOUNT"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>TMAESTRO-LITE.JVM_MONITOR_METRIC.JVMJITTIME</code>.
     */
    public final TableField<JvmMonitorMetricRecord, Long> JVMJITTIME = createField(DSL.name("JVMJITTIME"), SQLDataType.BIGINT, this, "");

    private JvmMonitorMetric(Name alias, Table<JvmMonitorMetricRecord> aliased) {
        this(alias, aliased, null);
    }

    private JvmMonitorMetric(Name alias, Table<JvmMonitorMetricRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.JVM_MONITOR_METRIC</code> table reference
     */
    public JvmMonitorMetric(String alias) {
        this(DSL.name(alias), JVM_MONITOR_METRIC);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.JVM_MONITOR_METRIC</code> table reference
     */
    public JvmMonitorMetric(Name alias) {
        this(alias, JVM_MONITOR_METRIC);
    }

    /**
     * Create a <code>TMAESTRO-LITE.JVM_MONITOR_METRIC</code> table reference
     */
    public JvmMonitorMetric() {
        this(DSL.name("JVM_MONITOR_METRIC"), null);
    }

    public <O extends Record> JvmMonitorMetric(Table<O> child, ForeignKey<O, JvmMonitorMetricRecord> key) {
        super(child, key, JVM_MONITOR_METRIC);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<JvmMonitorMetricRecord, Integer> getIdentity() {
        return (Identity<JvmMonitorMetricRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JvmMonitorMetricRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_CC;
    }

    @Override
    public List<UniqueKey<JvmMonitorMetricRecord>> getKeys() {
        return Arrays.<UniqueKey<JvmMonitorMetricRecord>>asList(Keys.CONSTRAINT_CC);
    }

    @Override
    public JvmMonitorMetric as(String alias) {
        return new JvmMonitorMetric(DSL.name(alias), this);
    }

    @Override
    public JvmMonitorMetric as(Name alias) {
        return new JvmMonitorMetric(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JvmMonitorMetric rename(String name) {
        return new JvmMonitorMetric(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JvmMonitorMetric rename(Name name) {
        return new JvmMonitorMetric(name, null);
    }
}
