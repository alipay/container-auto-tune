/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.MeterMetaInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MeterMetaInfo extends TableImpl<MeterMetaInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.METER_META_INFO</code>
     */
    public static final MeterMetaInfo METER_META_INFO = new MeterMetaInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MeterMetaInfoRecord> getRecordType() {
        return MeterMetaInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.ID</code>. 唯一ID;唯一ID
     */
    public final TableField<MeterMetaInfoRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "唯一ID;唯一ID");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.CREATED_TIME</code>.
     */
    public final TableField<MeterMetaInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.MODIFIED_TIME</code>.
     */
    public final TableField<MeterMetaInfoRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("MODIFIED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.METER_NAME</code>. 注册的监控名称
     */
    public final TableField<MeterMetaInfoRecord, String> METER_NAME = createField(DSL.name("METER_NAME"), SQLDataType.VARCHAR(100).nullable(false), this, "注册的监控名称");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.METER_DOMAIN</code>. 注册监控的domain
     */
    public final TableField<MeterMetaInfoRecord, String> METER_DOMAIN = createField(DSL.name("METER_DOMAIN"), SQLDataType.VARCHAR(200), this, "注册监控的domain");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.METER_METRICS</code>. 监控指标信息
     */
    public final TableField<MeterMetaInfoRecord, String> METER_METRICS = createField(DSL.name("METER_METRICS"), SQLDataType.VARCHAR(2048), this, "监控指标信息");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.METER_ENABLE</code>.
     */
    public final TableField<MeterMetaInfoRecord, String> METER_ENABLE = createField(DSL.name("METER_ENABLE"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>TMAESTRO-LITE.METER_META_INFO.APP_ID</code>.
     */
    public final TableField<MeterMetaInfoRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    private MeterMetaInfo(Name alias, Table<MeterMetaInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private MeterMetaInfo(Name alias, Table<MeterMetaInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.METER_META_INFO</code> table reference
     */
    public MeterMetaInfo(String alias) {
        this(DSL.name(alias), METER_META_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.METER_META_INFO</code> table reference
     */
    public MeterMetaInfo(Name alias) {
        this(alias, METER_META_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.METER_META_INFO</code> table reference
     */
    public MeterMetaInfo() {
        this(DSL.name("METER_META_INFO"), null);
    }

    public <O extends Record> MeterMetaInfo(Table<O> child, ForeignKey<O, MeterMetaInfoRecord> key) {
        super(child, key, METER_META_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<MeterMetaInfoRecord, Integer> getIdentity() {
        return (Identity<MeterMetaInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MeterMetaInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_FE;
    }

    @Override
    public List<UniqueKey<MeterMetaInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<MeterMetaInfoRecord>>asList(Keys.CONSTRAINT_FE);
    }

    @Override
    public MeterMetaInfo as(String alias) {
        return new MeterMetaInfo(DSL.name(alias), this);
    }

    @Override
    public MeterMetaInfo as(Name alias) {
        return new MeterMetaInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MeterMetaInfo rename(String name) {
        return new MeterMetaInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MeterMetaInfo rename(Name name) {
        return new MeterMetaInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, LocalDateTime, String, String, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
