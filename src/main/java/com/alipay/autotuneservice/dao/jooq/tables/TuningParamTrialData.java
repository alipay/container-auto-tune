/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.TuningParamTrialDataRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TuningParamTrialData extends TableImpl<TuningParamTrialDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA</code>
     */
    public static final TuningParamTrialData TUNING_PARAM_TRIAL_DATA = new TuningParamTrialData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TuningParamTrialDataRecord> getRecordType() {
        return TuningParamTrialDataRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.ID</code>.
     */
    public final TableField<TuningParamTrialDataRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.PIPELINE_ID</code>.
     */
    public final TableField<TuningParamTrialDataRecord, Integer> PIPELINE_ID = createField(DSL.name("PIPELINE_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_ID</code>.
     */
    public final TableField<TuningParamTrialDataRecord, Integer> TRIAL_ID = createField(DSL.name("TRIAL_ID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.APP</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> APP = createField(DSL.name("APP"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.APP_ID</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_STATUS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TRIAL_STATUS = createField(DSL.name("TRIAL_STATUS"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_STATUS_INFO</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TRIAL_STATUS_INFO = createField(DSL.name("TRIAL_STATUS_INFO"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TASK_STATUS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TASK_STATUS = createField(DSL.name("TASK_STATUS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.REFER_PARAMS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> REFER_PARAMS = createField(DSL.name("REFER_PARAMS"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_PARAMS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TRIAL_PARAMS = createField(DSL.name("TRIAL_PARAMS"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.ALG_REC_TYPE</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> ALG_REC_TYPE = createField(DSL.name("ALG_REC_TYPE"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.REFER_PODS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> REFER_PODS = createField(DSL.name("REFER_PODS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_PODS</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TRIAL_PODS = createField(DSL.name("TRIAL_PODS"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.REFER_METRIC_VALUE</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> REFER_METRIC_VALUE = createField(DSL.name("REFER_METRIC_VALUE"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.TRIAL_METRIC_VALUE</code>.
     */
    public final TableField<TuningParamTrialDataRecord, String> TRIAL_METRIC_VALUE = createField(DSL.name("TRIAL_METRIC_VALUE"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.START_TIME</code>.
     */
    public final TableField<TuningParamTrialDataRecord, LocalDateTime> START_TIME = createField(DSL.name("START_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA.STOP_TIME</code>.
     */
    public final TableField<TuningParamTrialDataRecord, LocalDateTime> STOP_TIME = createField(DSL.name("STOP_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private TuningParamTrialData(Name alias, Table<TuningParamTrialDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TuningParamTrialData(Name alias, Table<TuningParamTrialDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA</code> table reference
     */
    public TuningParamTrialData(String alias) {
        this(DSL.name(alias), TUNING_PARAM_TRIAL_DATA);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA</code> table reference
     */
    public TuningParamTrialData(Name alias) {
        this(alias, TUNING_PARAM_TRIAL_DATA);
    }

    /**
     * Create a <code>TMAESTRO-LITE.TUNING_PARAM_TRIAL_DATA</code> table reference
     */
    public TuningParamTrialData() {
        this(DSL.name("TUNING_PARAM_TRIAL_DATA"), null);
    }

    public <O extends Record> TuningParamTrialData(Table<O> child, ForeignKey<O, TuningParamTrialDataRecord> key) {
        super(child, key, TUNING_PARAM_TRIAL_DATA);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<TuningParamTrialDataRecord, Long> getIdentity() {
        return (Identity<TuningParamTrialDataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TuningParamTrialDataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_67;
    }

    @Override
    public List<UniqueKey<TuningParamTrialDataRecord>> getKeys() {
        return Arrays.<UniqueKey<TuningParamTrialDataRecord>>asList(Keys.CONSTRAINT_67);
    }

    @Override
    public TuningParamTrialData as(String alias) {
        return new TuningParamTrialData(DSL.name(alias), this);
    }

    @Override
    public TuningParamTrialData as(Name alias) {
        return new TuningParamTrialData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTrialData rename(String name) {
        return new TuningParamTrialData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TuningParamTrialData rename(Name name) {
        return new TuningParamTrialData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, Integer, Integer, String, String, String, String, String, String, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
