/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Indexes;
import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.TunePlanRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TunePlan extends TableImpl<TunePlanRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.TUNE_PLAN</code>
     */
    public static final TunePlan TUNE_PLAN = new TunePlan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TunePlanRecord> getRecordType() {
        return TunePlanRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.ID</code>. 主键ID
     */
    public final TableField<TunePlanRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.HEALTH_CHECK_ID</code>. 关联的健康检查id
     */
    public final TableField<TunePlanRecord, Integer> HEALTH_CHECK_ID = createField(DSL.name("HEALTH_CHECK_ID"), SQLDataType.INTEGER, this, "关联的健康检查id");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.ACCESS_TOKEN</code>. 关联的token
     */
    public final TableField<TunePlanRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(255).nullable(false), this, "关联的token");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.APP_ID</code>. 关联的集群id
     */
    public final TableField<TunePlanRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER, this, "关联的集群id");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.PLAN_NAME</code>. 任务名称
     */
    public final TableField<TunePlanRecord, String> PLAN_NAME = createField(DSL.name("PLAN_NAME"), SQLDataType.VARCHAR(255), this, "任务名称");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.PLAN_STATUS</code>. 任务状态:RUNNING,END,INIT
     */
    public final TableField<TunePlanRecord, String> PLAN_STATUS = createField(DSL.name("PLAN_STATUS"), SQLDataType.VARCHAR(255).nullable(false), this, "任务状态:RUNNING,END,INIT");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.ACTION_STATUS</code>. 任务状态:AUTO、MANUAL
     */
    public final TableField<TunePlanRecord, String> ACTION_STATUS = createField(DSL.name("ACTION_STATUS"), SQLDataType.VARCHAR(255).nullable(false), this, "任务状态:AUTO、MANUAL");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.PLAN_PARAM</code>. 任务参数
     */
    public final TableField<TunePlanRecord, String> PLAN_PARAM = createField(DSL.name("PLAN_PARAM"), SQLDataType.VARCHAR(255), this, "任务参数");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.CREATED_TIME</code>. 创建时间
     */
    public final TableField<TunePlanRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.UPDATE_TIME</code>. 修改时间
     */
    public final TableField<TunePlanRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("UPDATE_TIME"), SQLDataType.LOCALDATETIME(6), this, "修改时间");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.TUNE_EFFECT</code>.
     */
    public final TableField<TunePlanRecord, String> TUNE_EFFECT = createField(DSL.name("TUNE_EFFECT"), SQLDataType.VARCHAR(2000), this, "");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.PREDICT_EFFECT</code>. 预期评估
     */
    public final TableField<TunePlanRecord, String> PREDICT_EFFECT = createField(DSL.name("PREDICT_EFFECT"), SQLDataType.VARCHAR(2000), this, "预期评估");

    /**
     * The column <code>TMAESTRO-LITE.TUNE_PLAN.TUNE_STATUS</code>.
     */
    public final TableField<TunePlanRecord, String> TUNE_STATUS = createField(DSL.name("TUNE_STATUS"), SQLDataType.VARCHAR(255), this, "");

    private TunePlan(Name alias, Table<TunePlanRecord> aliased) {
        this(alias, aliased, null);
    }

    private TunePlan(Name alias, Table<TunePlanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNE_PLAN</code> table reference
     */
    public TunePlan(String alias) {
        this(DSL.name(alias), TUNE_PLAN);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.TUNE_PLAN</code> table reference
     */
    public TunePlan(Name alias) {
        this(alias, TUNE_PLAN);
    }

    /**
     * Create a <code>TMAESTRO-LITE.TUNE_PLAN</code> table reference
     */
    public TunePlan() {
        this(DSL.name("TUNE_PLAN"), null);
    }

    public <O extends Record> TunePlan(Table<O> child, ForeignKey<O, TunePlanRecord> key) {
        super(child, key, TUNE_PLAN);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TUNE_PLAN_APP_ID_INDEX);
    }

    @Override
    public Identity<TunePlanRecord, Integer> getIdentity() {
        return (Identity<TunePlanRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TunePlanRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_BD;
    }

    @Override
    public List<UniqueKey<TunePlanRecord>> getKeys() {
        return Arrays.<UniqueKey<TunePlanRecord>>asList(Keys.CONSTRAINT_BD);
    }

    @Override
    public TunePlan as(String alias) {
        return new TunePlan(DSL.name(alias), this);
    }

    @Override
    public TunePlan as(Name alias) {
        return new TunePlan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TunePlan rename(String name) {
        return new TunePlan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TunePlan rename(Name name) {
        return new TunePlan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, Integer, String, Integer, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row13) super.fieldsRow();
    }
}
