/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.NodeInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NodeInfo extends TableImpl<NodeInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.NODE_INFO</code>
     */
    public static final NodeInfo NODE_INFO = new NodeInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NodeInfoRecord> getRecordType() {
        return NodeInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.ID</code>. 主键ID
     */
    public final TableField<NodeInfoRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "主键ID");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.NODE_NAME</code>. 节点名称
     */
    public final TableField<NodeInfoRecord, String> NODE_NAME = createField(DSL.name("NODE_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "节点名称");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.IP</code>. IP地址
     */
    public final TableField<NodeInfoRecord, String> IP = createField(DSL.name("IP"), SQLDataType.VARCHAR(255).nullable(false), this, "IP地址");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.STATUS</code>. 状态;状态;包含：存活、失效
     */
    public final TableField<NodeInfoRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(255), this, "状态;状态;包含：存活、失效");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.CREATED_TIME</code>. 创建时间
     */
    public final TableField<NodeInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.NODE_TAGS</code>. 标签
     */
    public final TableField<NodeInfoRecord, String> NODE_TAGS = createField(DSL.name("NODE_TAGS"), SQLDataType.VARCHAR(8192), this, "标签");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.ACCESS_TOKEN</code>. 关联的token
     */
    public final TableField<NodeInfoRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(255).nullable(false), this, "关联的token");

    /**
     * The column <code>TMAESTRO-LITE.NODE_INFO.UPDATED_TIME</code>.
     */
    public final TableField<NodeInfoRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private NodeInfo(Name alias, Table<NodeInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private NodeInfo(Name alias, Table<NodeInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.NODE_INFO</code> table reference
     */
    public NodeInfo(String alias) {
        this(DSL.name(alias), NODE_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.NODE_INFO</code> table reference
     */
    public NodeInfo(Name alias) {
        this(alias, NODE_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.NODE_INFO</code> table reference
     */
    public NodeInfo() {
        this(DSL.name("NODE_INFO"), null);
    }

    public <O extends Record> NodeInfo(Table<O> child, ForeignKey<O, NodeInfoRecord> key) {
        super(child, key, NODE_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<NodeInfoRecord, Integer> getIdentity() {
        return (Identity<NodeInfoRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<NodeInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C;
    }

    @Override
    public List<UniqueKey<NodeInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<NodeInfoRecord>>asList(Keys.CONSTRAINT_C, Keys.NODE_INFO_NODE_NAME_ACCESS_TOKEN_UINDEX);
    }

    @Override
    public NodeInfo as(String alias) {
        return new NodeInfo(DSL.name(alias), this);
    }

    @Override
    public NodeInfo as(Name alias) {
        return new NodeInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeInfo rename(String name) {
        return new NodeInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NodeInfo rename(Name name) {
        return new NodeInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, LocalDateTime, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
