/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables.records;


import com.alipay.autotuneservice.dao.jooq.tables.RiskCheckControl;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RiskCheckControlRecord extends UpdatableRecordImpl<RiskCheckControlRecord> implements Record12<Integer, Integer, String, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.ID</code>. 主键ID
     */
    public RiskCheckControlRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.ID</code>. 主键ID
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.APP_ID</code>. 应用id
     */
    public RiskCheckControlRecord setAppId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.APP_ID</code>. 应用id
     */
    public Integer getAppId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.APP_NAME</code>. 应用名称
     */
    public RiskCheckControlRecord setAppName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.APP_NAME</code>. 应用名称
     */
    public String getAppName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CHECK_TIME</code>. 风险检查次数
     */
    public RiskCheckControlRecord setCheckTime(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CHECK_TIME</code>. 风险检查次数
     */
    public Integer getCheckTime() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.TASK_IDS</code>. 任务ID列表
     */
    public RiskCheckControlRecord setTaskIds(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.TASK_IDS</code>. 任务ID列表
     */
    public String getTaskIds() {
        return (String) get(4);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.STATUS</code>. 任务执行状态(EXECETING,END)
     */
    public RiskCheckControlRecord setStatus(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.STATUS</code>. 任务执行状态(EXECETING,END)
     */
    public String getStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CHECK_RESULT</code>. 风险检查结果
     */
    public RiskCheckControlRecord setCheckResult(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CHECK_RESULT</code>. 风险检查结果
     */
    public String getCheckResult() {
        return (String) get(6);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.TRACE_ID</code>. 任务唯一标识
     */
    public RiskCheckControlRecord setTraceId(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.TRACE_ID</code>. 任务唯一标识
     */
    public String getTraceId() {
        return (String) get(7);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISK_MSG</code>. 风险详情
     */
    public RiskCheckControlRecord setRiskMsg(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISK_MSG</code>. 风险详情
     */
    public String getRiskMsg() {
        return (String) get(8);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CREATE_TIME</code>. 创建时间
     */
    public RiskCheckControlRecord setCreateTime(LocalDateTime value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.CREATE_TIME</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISKBEGINTIME</code>.
     */
    public RiskCheckControlRecord setRiskbegintime(LocalDateTime value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISKBEGINTIME</code>.
     */
    public LocalDateTime getRiskbegintime() {
        return (LocalDateTime) get(10);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISKENDTIME</code>.
     */
    public RiskCheckControlRecord setRiskendtime(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_CONTROL.RISKENDTIME</code>.
     */
    public LocalDateTime getRiskendtime() {
        return (LocalDateTime) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, Integer, String, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, Integer, String, Integer, String, String, String, String, String, LocalDateTime, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RiskCheckControl.RISK_CHECK_CONTROL.ID;
    }

    @Override
    public Field<Integer> field2() {
        return RiskCheckControl.RISK_CHECK_CONTROL.APP_ID;
    }

    @Override
    public Field<String> field3() {
        return RiskCheckControl.RISK_CHECK_CONTROL.APP_NAME;
    }

    @Override
    public Field<Integer> field4() {
        return RiskCheckControl.RISK_CHECK_CONTROL.CHECK_TIME;
    }

    @Override
    public Field<String> field5() {
        return RiskCheckControl.RISK_CHECK_CONTROL.TASK_IDS;
    }

    @Override
    public Field<String> field6() {
        return RiskCheckControl.RISK_CHECK_CONTROL.STATUS;
    }

    @Override
    public Field<String> field7() {
        return RiskCheckControl.RISK_CHECK_CONTROL.CHECK_RESULT;
    }

    @Override
    public Field<String> field8() {
        return RiskCheckControl.RISK_CHECK_CONTROL.TRACE_ID;
    }

    @Override
    public Field<String> field9() {
        return RiskCheckControl.RISK_CHECK_CONTROL.RISK_MSG;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return RiskCheckControl.RISK_CHECK_CONTROL.CREATE_TIME;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return RiskCheckControl.RISK_CHECK_CONTROL.RISKBEGINTIME;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return RiskCheckControl.RISK_CHECK_CONTROL.RISKENDTIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAppId();
    }

    @Override
    public String component3() {
        return getAppName();
    }

    @Override
    public Integer component4() {
        return getCheckTime();
    }

    @Override
    public String component5() {
        return getTaskIds();
    }

    @Override
    public String component6() {
        return getStatus();
    }

    @Override
    public String component7() {
        return getCheckResult();
    }

    @Override
    public String component8() {
        return getTraceId();
    }

    @Override
    public String component9() {
        return getRiskMsg();
    }

    @Override
    public LocalDateTime component10() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime component11() {
        return getRiskbegintime();
    }

    @Override
    public LocalDateTime component12() {
        return getRiskendtime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAppId();
    }

    @Override
    public String value3() {
        return getAppName();
    }

    @Override
    public Integer value4() {
        return getCheckTime();
    }

    @Override
    public String value5() {
        return getTaskIds();
    }

    @Override
    public String value6() {
        return getStatus();
    }

    @Override
    public String value7() {
        return getCheckResult();
    }

    @Override
    public String value8() {
        return getTraceId();
    }

    @Override
    public String value9() {
        return getRiskMsg();
    }

    @Override
    public LocalDateTime value10() {
        return getCreateTime();
    }

    @Override
    public LocalDateTime value11() {
        return getRiskbegintime();
    }

    @Override
    public LocalDateTime value12() {
        return getRiskendtime();
    }

    @Override
    public RiskCheckControlRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value2(Integer value) {
        setAppId(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value3(String value) {
        setAppName(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value4(Integer value) {
        setCheckTime(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value5(String value) {
        setTaskIds(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value6(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value7(String value) {
        setCheckResult(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value8(String value) {
        setTraceId(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value9(String value) {
        setRiskMsg(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value10(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value11(LocalDateTime value) {
        setRiskbegintime(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord value12(LocalDateTime value) {
        setRiskendtime(value);
        return this;
    }

    @Override
    public RiskCheckControlRecord values(Integer value1, Integer value2, String value3, Integer value4, String value5, String value6, String value7, String value8, String value9, LocalDateTime value10, LocalDateTime value11, LocalDateTime value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RiskCheckControlRecord
     */
    public RiskCheckControlRecord() {
        super(RiskCheckControl.RISK_CHECK_CONTROL);
    }

    /**
     * Create a detached, initialised RiskCheckControlRecord
     */
    public RiskCheckControlRecord(Integer id, Integer appId, String appName, Integer checkTime, String taskIds, String status, String checkResult, String traceId, String riskMsg, LocalDateTime createTime, LocalDateTime riskbegintime, LocalDateTime riskendtime) {
        super(RiskCheckControl.RISK_CHECK_CONTROL);

        setId(id);
        setAppId(appId);
        setAppName(appName);
        setCheckTime(checkTime);
        setTaskIds(taskIds);
        setStatus(status);
        setCheckResult(checkResult);
        setTraceId(traceId);
        setRiskMsg(riskMsg);
        setCreateTime(createTime);
        setRiskbegintime(riskbegintime);
        setRiskendtime(riskendtime);
    }
}
