/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.Threadpool1MonitorMetricDataRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Threadpool1MonitorMetricData extends TableImpl<Threadpool1MonitorMetricDataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA</code>
     */
    public static final Threadpool1MonitorMetricData THREADPOOL1_MONITOR_METRIC_DATA = new Threadpool1MonitorMetricData();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Threadpool1MonitorMetricDataRecord> getRecordType() {
        return Threadpool1MonitorMetricDataRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.ID</code>. 唯一ID;唯一ID
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "唯一ID;唯一ID");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.HOST_NAME</code>. host name
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, String> HOST_NAME = createField(DSL.name("HOST_NAME"), SQLDataType.VARCHAR(128).nullable(false), this, "host name");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.PERIOD</code>. 日期
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> PERIOD = createField(DSL.name("PERIOD"), SQLDataType.BIGINT.nullable(false), this, "日期");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.ACTIVE_COUNT</code>. activeCount
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> ACTIVE_COUNT = createField(DSL.name("ACTIVE_COUNT"), SQLDataType.INTEGER, this, "activeCount");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.APP_NAME</code>. appName
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, String> APP_NAME = createField(DSL.name("APP_NAME"), SQLDataType.VARCHAR(128), this, "appName");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.BLOCK_QUEUE</code>. blockQueue
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> BLOCK_QUEUE = createField(DSL.name("BLOCK_QUEUE"), SQLDataType.BIGINT, this, "blockQueue");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.COMPLETED_TASK_COUNT</code>. completedTaskCount
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> COMPLETED_TASK_COUNT = createField(DSL.name("COMPLETED_TASK_COUNT"), SQLDataType.BIGINT, this, "completedTaskCount");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.CORE_POOL_SIZE</code>. corePoolSize
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> CORE_POOL_SIZE = createField(DSL.name("CORE_POOL_SIZE"), SQLDataType.INTEGER, this, "corePoolSize");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.DT</code>. dt
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> DT = createField(DSL.name("DT"), SQLDataType.BIGINT, this, "dt");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.IDLE_POOL_SIZE</code>. idlePoolSize
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> IDLE_POOL_SIZE = createField(DSL.name("IDLE_POOL_SIZE"), SQLDataType.INTEGER, this, "idlePoolSize");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.KEEP_ALIVE_TIME</code>. keepAliveTime
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> KEEP_ALIVE_TIME = createField(DSL.name("KEEP_ALIVE_TIME"), SQLDataType.BIGINT, this, "keepAliveTime");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.LARGEST_POOL_SIZE</code>. largestPoolSize
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> LARGEST_POOL_SIZE = createField(DSL.name("LARGEST_POOL_SIZE"), SQLDataType.INTEGER, this, "largestPoolSize");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.MAXI_MUM_POOL_SIZE</code>. maximumPoolSize
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> MAXI_MUM_POOL_SIZE = createField(DSL.name("MAXI_MUM_POOL_SIZE"), SQLDataType.INTEGER, this, "maximumPoolSize");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.POOL_SIZE</code>. poolSize
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Integer> POOL_SIZE = createField(DSL.name("POOL_SIZE"), SQLDataType.INTEGER, this, "poolSize");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.REJECT_COUNT</code>. rejectCount
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> REJECT_COUNT = createField(DSL.name("REJECT_COUNT"), SQLDataType.BIGINT, this, "rejectCount");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.TASK_COUNT</code>. taskCount
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, Long> TASK_COUNT = createField(DSL.name("TASK_COUNT"), SQLDataType.BIGINT, this, "taskCount");

    /**
     * The column <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA.THREAD_POOL_NAME</code>.
     */
    public final TableField<Threadpool1MonitorMetricDataRecord, String> THREAD_POOL_NAME = createField(DSL.name("THREAD_POOL_NAME"), SQLDataType.VARCHAR(256), this, "");

    private Threadpool1MonitorMetricData(Name alias, Table<Threadpool1MonitorMetricDataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Threadpool1MonitorMetricData(Name alias, Table<Threadpool1MonitorMetricDataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA</code> table reference
     */
    public Threadpool1MonitorMetricData(String alias) {
        this(DSL.name(alias), THREADPOOL1_MONITOR_METRIC_DATA);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA</code> table reference
     */
    public Threadpool1MonitorMetricData(Name alias) {
        this(alias, THREADPOOL1_MONITOR_METRIC_DATA);
    }

    /**
     * Create a <code>TMAESTRO-LITE.THREADPOOL1_MONITOR_METRIC_DATA</code> table reference
     */
    public Threadpool1MonitorMetricData() {
        this(DSL.name("THREADPOOL1_MONITOR_METRIC_DATA"), null);
    }

    public <O extends Record> Threadpool1MonitorMetricData(Table<O> child, ForeignKey<O, Threadpool1MonitorMetricDataRecord> key) {
        super(child, key, THREADPOOL1_MONITOR_METRIC_DATA);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<Threadpool1MonitorMetricDataRecord, Integer> getIdentity() {
        return (Identity<Threadpool1MonitorMetricDataRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<Threadpool1MonitorMetricDataRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_79;
    }

    @Override
    public List<UniqueKey<Threadpool1MonitorMetricDataRecord>> getKeys() {
        return Arrays.<UniqueKey<Threadpool1MonitorMetricDataRecord>>asList(Keys.CONSTRAINT_79);
    }

    @Override
    public Threadpool1MonitorMetricData as(String alias) {
        return new Threadpool1MonitorMetricData(DSL.name(alias), this);
    }

    @Override
    public Threadpool1MonitorMetricData as(Name alias) {
        return new Threadpool1MonitorMetricData(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Threadpool1MonitorMetricData rename(String name) {
        return new Threadpool1MonitorMetricData(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Threadpool1MonitorMetricData rename(Name name) {
        return new Threadpool1MonitorMetricData(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, Long, Integer, String, Long, Long, Integer, Long, Integer, Long, Integer, Integer, Integer, Long, Long, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
