/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.LockRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lock extends TableImpl<LockRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.LOCK</code>
     */
    public static final Lock LOCK = new Lock();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LockRecord> getRecordType() {
        return LockRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.LOCK.ID</code>.
     */
    public final TableField<LockRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>TMAESTRO-LITE.LOCK.LOCK_NAME</code>.
     */
    public final TableField<LockRecord, String> LOCK_NAME = createField(DSL.name("LOCK_NAME"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>TMAESTRO-LITE.LOCK.CREATED_TIME</code>.
     */
    public final TableField<LockRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.LOCK.UPDATED_TIME</code>.
     */
    public final TableField<LockRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private Lock(Name alias, Table<LockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lock(Name alias, Table<LockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.LOCK</code> table reference
     */
    public Lock(String alias) {
        this(DSL.name(alias), LOCK);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.LOCK</code> table reference
     */
    public Lock(Name alias) {
        this(alias, LOCK);
    }

    /**
     * Create a <code>TMAESTRO-LITE.LOCK</code> table reference
     */
    public Lock() {
        this(DSL.name("LOCK"), null);
    }

    public <O extends Record> Lock(Table<O> child, ForeignKey<O, LockRecord> key) {
        super(child, key, LOCK);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<LockRecord, Integer> getIdentity() {
        return (Identity<LockRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LockRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_23;
    }

    @Override
    public List<UniqueKey<LockRecord>> getKeys() {
        return Arrays.<UniqueKey<LockRecord>>asList(Keys.CONSTRAINT_23, Keys.LOCK_LOCK_NAME_UINDEX);
    }

    @Override
    public Lock as(String alias) {
        return new Lock(DSL.name(alias), this);
    }

    @Override
    public Lock as(Name alias) {
        return new Lock(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lock rename(String name) {
        return new Lock(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lock rename(Name name) {
        return new Lock(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
