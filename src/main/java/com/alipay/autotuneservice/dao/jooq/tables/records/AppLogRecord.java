/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables.records;


import com.alipay.autotuneservice.dao.jooq.tables.AppLog;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppLogRecord extends UpdatableRecordImpl<AppLogRecord> implements Record10<Long, Integer, String, String, String, LocalDateTime, LocalDateTime, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.ID</code>. 主键
     */
    public AppLogRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.ID</code>. 主键
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.APP_ID</code>. 应用id
     */
    public AppLogRecord setAppId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.APP_ID</code>. 应用id
     */
    public Integer getAppId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.LOG_TYPE</code>. 日志类型
     */
    public AppLogRecord setLogType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.LOG_TYPE</code>. 日志类型
     */
    public String getLogType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.S3_KEY</code>. s3文件key
     */
    public AppLogRecord setS3Key(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.S3_KEY</code>. s3文件key
     */
    public String getS3Key() {
        return (String) get(3);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.HOST_NAME</code>. 主机名
     */
    public AppLogRecord setHostName(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.HOST_NAME</code>. 主机名
     */
    public String getHostName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.CREATED_TIME</code>. 创建时间
     */
    public AppLogRecord setCreatedTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.CREATED_TIME</code>. 创建时间
     */
    public LocalDateTime getCreatedTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.UPDATED_TIME</code>. 更新时间
     */
    public AppLogRecord setUpdatedTime(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.UPDATED_TIME</code>. 更新时间
     */
    public LocalDateTime getUpdatedTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.FILE_NAME</code>. 文件名
     */
    public AppLogRecord setFileName(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.FILE_NAME</code>. 文件名
     */
    public String getFileName() {
        return (String) get(7);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.CONTEXT</code>. 上下文
     */
    public AppLogRecord setContext(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.CONTEXT</code>. 上下文
     */
    public String getContext() {
        return (String) get(8);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.APP_LOG.STATUS</code>.
     */
    public AppLogRecord setStatus(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.APP_LOG.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, String, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Long, Integer, String, String, String, LocalDateTime, LocalDateTime, String, String, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AppLog.APP_LOG.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AppLog.APP_LOG.APP_ID;
    }

    @Override
    public Field<String> field3() {
        return AppLog.APP_LOG.LOG_TYPE;
    }

    @Override
    public Field<String> field4() {
        return AppLog.APP_LOG.S3_KEY;
    }

    @Override
    public Field<String> field5() {
        return AppLog.APP_LOG.HOST_NAME;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return AppLog.APP_LOG.CREATED_TIME;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return AppLog.APP_LOG.UPDATED_TIME;
    }

    @Override
    public Field<String> field8() {
        return AppLog.APP_LOG.FILE_NAME;
    }

    @Override
    public Field<String> field9() {
        return AppLog.APP_LOG.CONTEXT;
    }

    @Override
    public Field<String> field10() {
        return AppLog.APP_LOG.STATUS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAppId();
    }

    @Override
    public String component3() {
        return getLogType();
    }

    @Override
    public String component4() {
        return getS3Key();
    }

    @Override
    public String component5() {
        return getHostName();
    }

    @Override
    public LocalDateTime component6() {
        return getCreatedTime();
    }

    @Override
    public LocalDateTime component7() {
        return getUpdatedTime();
    }

    @Override
    public String component8() {
        return getFileName();
    }

    @Override
    public String component9() {
        return getContext();
    }

    @Override
    public String component10() {
        return getStatus();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAppId();
    }

    @Override
    public String value3() {
        return getLogType();
    }

    @Override
    public String value4() {
        return getS3Key();
    }

    @Override
    public String value5() {
        return getHostName();
    }

    @Override
    public LocalDateTime value6() {
        return getCreatedTime();
    }

    @Override
    public LocalDateTime value7() {
        return getUpdatedTime();
    }

    @Override
    public String value8() {
        return getFileName();
    }

    @Override
    public String value9() {
        return getContext();
    }

    @Override
    public String value10() {
        return getStatus();
    }

    @Override
    public AppLogRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AppLogRecord value2(Integer value) {
        setAppId(value);
        return this;
    }

    @Override
    public AppLogRecord value3(String value) {
        setLogType(value);
        return this;
    }

    @Override
    public AppLogRecord value4(String value) {
        setS3Key(value);
        return this;
    }

    @Override
    public AppLogRecord value5(String value) {
        setHostName(value);
        return this;
    }

    @Override
    public AppLogRecord value6(LocalDateTime value) {
        setCreatedTime(value);
        return this;
    }

    @Override
    public AppLogRecord value7(LocalDateTime value) {
        setUpdatedTime(value);
        return this;
    }

    @Override
    public AppLogRecord value8(String value) {
        setFileName(value);
        return this;
    }

    @Override
    public AppLogRecord value9(String value) {
        setContext(value);
        return this;
    }

    @Override
    public AppLogRecord value10(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public AppLogRecord values(Long value1, Integer value2, String value3, String value4, String value5, LocalDateTime value6, LocalDateTime value7, String value8, String value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AppLogRecord
     */
    public AppLogRecord() {
        super(AppLog.APP_LOG);
    }

    /**
     * Create a detached, initialised AppLogRecord
     */
    public AppLogRecord(Long id, Integer appId, String logType, String s3Key, String hostName, LocalDateTime createdTime, LocalDateTime updatedTime, String fileName, String context, String status) {
        super(AppLog.APP_LOG);

        setId(id);
        setAppId(appId);
        setLogType(logType);
        setS3Key(s3Key);
        setHostName(hostName);
        setCreatedTime(createdTime);
        setUpdatedTime(updatedTime);
        setFileName(fileName);
        setContext(context);
        setStatus(status);
    }
}
