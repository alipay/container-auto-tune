/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.AppLogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AppLog extends TableImpl<AppLogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.APP_LOG</code>
     */
    public static final AppLog APP_LOG = new AppLog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AppLogRecord> getRecordType() {
        return AppLogRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.ID</code>. 主键
     */
    public final TableField<AppLogRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.APP_ID</code>. 应用id
     */
    public final TableField<AppLogRecord, Integer> APP_ID = createField(DSL.name("APP_ID"), SQLDataType.INTEGER.nullable(false), this, "应用id");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.LOG_TYPE</code>. 日志类型
     */
    public final TableField<AppLogRecord, String> LOG_TYPE = createField(DSL.name("LOG_TYPE"), SQLDataType.VARCHAR(128).nullable(false), this, "日志类型");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.S3_KEY</code>. s3文件key
     */
    public final TableField<AppLogRecord, String> S3_KEY = createField(DSL.name("S3_KEY"), SQLDataType.VARCHAR(256).nullable(false), this, "s3文件key");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.HOST_NAME</code>. 主机名
     */
    public final TableField<AppLogRecord, String> HOST_NAME = createField(DSL.name("HOST_NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "主机名");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.CREATED_TIME</code>. 创建时间
     */
    public final TableField<AppLogRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "创建时间");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.UPDATED_TIME</code>. 更新时间
     */
    public final TableField<AppLogRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "更新时间");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.FILE_NAME</code>. 文件名
     */
    public final TableField<AppLogRecord, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(256).nullable(false), this, "文件名");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.CONTEXT</code>. 上下文
     */
    public final TableField<AppLogRecord, String> CONTEXT = createField(DSL.name("CONTEXT"), SQLDataType.VARCHAR(2048), this, "上下文");

    /**
     * The column <code>TMAESTRO-LITE.APP_LOG.STATUS</code>.
     */
    public final TableField<AppLogRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(128), this, "");

    private AppLog(Name alias, Table<AppLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private AppLog(Name alias, Table<AppLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.APP_LOG</code> table reference
     */
    public AppLog(String alias) {
        this(DSL.name(alias), APP_LOG);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.APP_LOG</code> table reference
     */
    public AppLog(Name alias) {
        this(alias, APP_LOG);
    }

    /**
     * Create a <code>TMAESTRO-LITE.APP_LOG</code> table reference
     */
    public AppLog() {
        this(DSL.name("APP_LOG"), null);
    }

    public <O extends Record> AppLog(Table<O> child, ForeignKey<O, AppLogRecord> key) {
        super(child, key, APP_LOG);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<AppLogRecord, Long> getIdentity() {
        return (Identity<AppLogRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AppLogRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<UniqueKey<AppLogRecord>> getKeys() {
        return Arrays.<UniqueKey<AppLogRecord>>asList(Keys.CONSTRAINT_F);
    }

    @Override
    public AppLog as(String alias) {
        return new AppLog(DSL.name(alias), this);
    }

    @Override
    public AppLog as(Name alias) {
        return new AppLog(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AppLog rename(String name) {
        return new AppLog(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AppLog rename(Name name) {
        return new AppLog(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, Integer, String, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
