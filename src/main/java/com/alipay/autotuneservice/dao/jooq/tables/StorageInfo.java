/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables;


import com.alipay.autotuneservice.dao.jooq.Keys;
import com.alipay.autotuneservice.dao.jooq.TmaestroLite;
import com.alipay.autotuneservice.dao.jooq.tables.records.StorageInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StorageInfo extends TableImpl<StorageInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TMAESTRO-LITE.STORAGE_INFO</code>
     */
    public static final StorageInfo STORAGE_INFO = new StorageInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StorageInfoRecord> getRecordType() {
        return StorageInfoRecord.class;
    }

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.ID</code>.
     */
    public final TableField<StorageInfoRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.TYPE</code>.
     */
    public final TableField<StorageInfoRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.FILE_NAME</code>.
     */
    public final TableField<StorageInfoRecord, String> FILE_NAME = createField(DSL.name("FILE_NAME"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.S3_KEY</code>.
     */
    public final TableField<StorageInfoRecord, String> S3_KEY = createField(DSL.name("S3_KEY"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.RESULT_KEY</code>.
     */
    public final TableField<StorageInfoRecord, String> RESULT_KEY = createField(DSL.name("RESULT_KEY"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.ACCESS_TOKEN</code>.
     */
    public final TableField<StorageInfoRecord, String> ACCESS_TOKEN = createField(DSL.name("ACCESS_TOKEN"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.OPERATOR</code>.
     */
    public final TableField<StorageInfoRecord, String> OPERATOR = createField(DSL.name("OPERATOR"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.UPDATED_TIME</code>.
     */
    public final TableField<StorageInfoRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("UPDATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>TMAESTRO-LITE.STORAGE_INFO.CREATED_TIME</code>.
     */
    public final TableField<StorageInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private StorageInfo(Name alias, Table<StorageInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private StorageInfo(Name alias, Table<StorageInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.STORAGE_INFO</code> table reference
     */
    public StorageInfo(String alias) {
        this(DSL.name(alias), STORAGE_INFO);
    }

    /**
     * Create an aliased <code>TMAESTRO-LITE.STORAGE_INFO</code> table reference
     */
    public StorageInfo(Name alias) {
        this(alias, STORAGE_INFO);
    }

    /**
     * Create a <code>TMAESTRO-LITE.STORAGE_INFO</code> table reference
     */
    public StorageInfo() {
        this(DSL.name("STORAGE_INFO"), null);
    }

    public <O extends Record> StorageInfo(Table<O> child, ForeignKey<O, StorageInfoRecord> key) {
        super(child, key, STORAGE_INFO);
    }

    @Override
    public Schema getSchema() {
        return TmaestroLite.TMAESTRO_LITE;
    }

    @Override
    public Identity<StorageInfoRecord, Long> getIdentity() {
        return (Identity<StorageInfoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StorageInfoRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_C1;
    }

    @Override
    public List<UniqueKey<StorageInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<StorageInfoRecord>>asList(Keys.CONSTRAINT_C1);
    }

    @Override
    public StorageInfo as(String alias) {
        return new StorageInfo(DSL.name(alias), this);
    }

    @Override
    public StorageInfo as(Name alias) {
        return new StorageInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageInfo rename(String name) {
        return new StorageInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StorageInfo rename(Name name) {
        return new StorageInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
