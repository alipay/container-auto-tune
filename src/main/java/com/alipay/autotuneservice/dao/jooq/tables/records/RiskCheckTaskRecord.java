/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file is generated by jOOQ.
 */
package com.alipay.autotuneservice.dao.jooq.tables.records;


import com.alipay.autotuneservice.dao.jooq.tables.RiskCheckTask;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RiskCheckTaskRecord extends UpdatableRecordImpl<RiskCheckTaskRecord> implements Record9<Integer, Integer, LocalDateTime, String, String, String, String, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.ID</code>. 主键ID
     */
    public RiskCheckTaskRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.ID</code>. 主键ID
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.JOB_ID</code>. 对应risk_check_controller的主键
     */
    public RiskCheckTaskRecord setJobId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.JOB_ID</code>. 对应risk_check_controller的主键
     */
    public Integer getJobId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.EXECUTE_TIME</code>. 任务执行时间
     */
    public RiskCheckTaskRecord setExecuteTime(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.EXECUTE_TIME</code>. 任务执行时间
     */
    public LocalDateTime getExecuteTime() {
        return (LocalDateTime) get(2);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.EXECUTE_PARAM</code>. 任务ID列表
     */
    public RiskCheckTaskRecord setExecuteParam(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.EXECUTE_PARAM</code>. 任务ID列表
     */
    public String getExecuteParam() {
        return (String) get(3);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_STATUS</code>. 任务执行状态(READY,INTERUPTE,END)
     */
    public RiskCheckTaskRecord setTaskStatus(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_STATUS</code>. 任务执行状态(READY,INTERUPTE,END)
     */
    public String getTaskStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_RESULT</code>. 任务检查结果
     */
    public RiskCheckTaskRecord setTaskResult(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_RESULT</code>. 任务检查结果
     */
    public String getTaskResult() {
        return (String) get(5);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_TRACE_ID</code>. 任务唯一标识
     */
    public RiskCheckTaskRecord setTaskTraceId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_TRACE_ID</code>. 任务唯一标识
     */
    public String getTaskTraceId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_RISK_MSG</code>. 风险详情
     */
    public RiskCheckTaskRecord setTaskRiskMsg(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.TASK_RISK_MSG</code>. 风险详情
     */
    public String getTaskRiskMsg() {
        return (String) get(7);
    }

    /**
     * Setter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.CREATE_TIME</code>. 创建时间
     */
    public RiskCheckTaskRecord setCreateTime(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>TMAESTRO-LITE.RISK_CHECK_TASK.CREATE_TIME</code>. 创建时间
     */
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, Integer, LocalDateTime, String, String, String, String, String, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Integer, Integer, LocalDateTime, String, String, String, String, String, LocalDateTime> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return RiskCheckTask.RISK_CHECK_TASK.ID;
    }

    @Override
    public Field<Integer> field2() {
        return RiskCheckTask.RISK_CHECK_TASK.JOB_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return RiskCheckTask.RISK_CHECK_TASK.EXECUTE_TIME;
    }

    @Override
    public Field<String> field4() {
        return RiskCheckTask.RISK_CHECK_TASK.EXECUTE_PARAM;
    }

    @Override
    public Field<String> field5() {
        return RiskCheckTask.RISK_CHECK_TASK.TASK_STATUS;
    }

    @Override
    public Field<String> field6() {
        return RiskCheckTask.RISK_CHECK_TASK.TASK_RESULT;
    }

    @Override
    public Field<String> field7() {
        return RiskCheckTask.RISK_CHECK_TASK.TASK_TRACE_ID;
    }

    @Override
    public Field<String> field8() {
        return RiskCheckTask.RISK_CHECK_TASK.TASK_RISK_MSG;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return RiskCheckTask.RISK_CHECK_TASK.CREATE_TIME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getJobId();
    }

    @Override
    public LocalDateTime component3() {
        return getExecuteTime();
    }

    @Override
    public String component4() {
        return getExecuteParam();
    }

    @Override
    public String component5() {
        return getTaskStatus();
    }

    @Override
    public String component6() {
        return getTaskResult();
    }

    @Override
    public String component7() {
        return getTaskTraceId();
    }

    @Override
    public String component8() {
        return getTaskRiskMsg();
    }

    @Override
    public LocalDateTime component9() {
        return getCreateTime();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getJobId();
    }

    @Override
    public LocalDateTime value3() {
        return getExecuteTime();
    }

    @Override
    public String value4() {
        return getExecuteParam();
    }

    @Override
    public String value5() {
        return getTaskStatus();
    }

    @Override
    public String value6() {
        return getTaskResult();
    }

    @Override
    public String value7() {
        return getTaskTraceId();
    }

    @Override
    public String value8() {
        return getTaskRiskMsg();
    }

    @Override
    public LocalDateTime value9() {
        return getCreateTime();
    }

    @Override
    public RiskCheckTaskRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value2(Integer value) {
        setJobId(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value3(LocalDateTime value) {
        setExecuteTime(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value4(String value) {
        setExecuteParam(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value5(String value) {
        setTaskStatus(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value6(String value) {
        setTaskResult(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value7(String value) {
        setTaskTraceId(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value8(String value) {
        setTaskRiskMsg(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord value9(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public RiskCheckTaskRecord values(Integer value1, Integer value2, LocalDateTime value3, String value4, String value5, String value6, String value7, String value8, LocalDateTime value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RiskCheckTaskRecord
     */
    public RiskCheckTaskRecord() {
        super(RiskCheckTask.RISK_CHECK_TASK);
    }

    /**
     * Create a detached, initialised RiskCheckTaskRecord
     */
    public RiskCheckTaskRecord(Integer id, Integer jobId, LocalDateTime executeTime, String executeParam, String taskStatus, String taskResult, String taskTraceId, String taskRiskMsg, LocalDateTime createTime) {
        super(RiskCheckTask.RISK_CHECK_TASK);

        setId(id);
        setJobId(jobId);
        setExecuteTime(executeTime);
        setExecuteParam(executeParam);
        setTaskStatus(taskStatus);
        setTaskResult(taskResult);
        setTaskTraceId(taskTraceId);
        setTaskRiskMsg(taskRiskMsg);
        setCreateTime(createTime);
    }
}
