#!/usr/bin/env sh

LOG_FILE=/tmp/config_java_opts.log
AGENT_HEALTH_CHECK_FILE=/tmp/AGENT_HEALTH_CHECK
TUNE_MASTER_SERVER_URL="[=tmaestro_server_url]"
TUNE_AGENT_NAME=autoTuneAgent.jar
ERROR_CODE=119
recommended_java_opts=''

FINAL_START_JVM_OPTS_FILE=/tmp/FINAL_START_JVM_OPTS_FILE
ACCESS_TOKEN_FLAG="-Dtmasteraccess_token=[=accessToken]"
get_java_opts(){
  echo "=====> step0: start to record the default args ====="
  echo "default args: ${APP_DEFAULT_JVM_OPTS}"
  echo "=====> step1: start to get pod Name ====="
  POD_NAME=`echo "${HOSTNAME}"`
  NAMESPACE=`cat /var/run/secrets/kubernetes.io/serviceaccount/namespace`
  if [ -z "${POD_NAME}" ];then
    echo "Get pod name failed."
    return ${ERROR_CODE}
  fi
  echo "Get podName=${POD_NAME}"

  echo "=====> step2: start to check whether autoTuneAgent.jar installed ====="
  wget -qO autoTuneAgent.jar ${TUNE_MASTER_SERVER_URL}/api/storage/autoTuneAgent.jar
  if [ ! -f ${TUNE_AGENT_NAME} ]; then
    echo "file ${TUNE_AGENT_NAME} not exists."
    return ${ERROR_CODE}
  fi
  wget -O tmaster.yml ${TUNE_MASTER_SERVER_URL}/api/storage/tmaster.yml?accessToken=[=accessToken]
  echo -n "IS_TUNE_AGENT_INSTALL=true" | base64 >> ${AGENT_HEALTH_CHECK_FILE}
  echo "Check download ${TUNE_AGENT_NAME} successfully."

  echo "=====> step3: start to encypt default java_opts ====="
  BASE64_ENCODE_JAVA_DEFAULT=`echo "${APP_DEFAULT_JVM_OPTS}" | base64 -w 0`
  if [ $? -ne 0 ]; then
    BASE64_ENCODE_JAVA_DEFAULT=`echo "${APP_DEFAULT_JVM_OPTS}" | base64 -b 0`
  fi
  echo "Get app default jvm configurations=${APP_DEFAULT_JVM_OPTS}"

  echo "=====> step4: start to get recommended java_opts ====="
  recommended_java_opts=$(wget -qO - "${TUNE_MASTER_SERVER_URL}/api/tmaster/v1/jvm-opts-configs/fetch/[=accessToken]/${POD_NAME}?namespace=${NAMESPACE}&javaOptsDefault=${BASE64_ENCODE_JAVA_DEFAULT}")
  echo "Get recommended java opts is : ${recommended_java_opts}"
  if [ -z "${recommended_java_opts}" ]; then
    echo "Get recommended java opts is empty, so will use the default jvm to start."
    return ${ERROR_CODE}
  fi
  echo ${recommended_java_opts} > /tmp/recommended_java_opts.txt
  return 0
}

echo "-------------------- start to get java opts-------------------" > ${LOG_FILE}
get_java_opts 2>&1 >> ${LOG_FILE}
if [ $? -eq 0 ]; then
  echo "use recommend=[${recommended_java_opts}] jvm opts to start." >> ${LOG_FILE}
  echo "${ACCESS_TOKEN_FLAG} -javaagent:autoTuneAgent.jar ${recommended_java_opts}" > "${FINAL_START_JVM_OPTS_FILE}"
else
  echo "use default jvm configs to start." >> ${LOG_FILE}
  echo "${ACCESS_TOKEN_FLAG} -javaagent:autoTuneAgent.jar ${APP_DEFAULT_JVM_OPTS}" > "${FINAL_START_JVM_OPTS_FILE}"
fi

echo "-------------------- end to get java opts-------------------" >> ${LOG_FILE}

# output final jvm opts to start
# cat /tmp/FINAL_START_JVM_OPTS_FILE
exit 0